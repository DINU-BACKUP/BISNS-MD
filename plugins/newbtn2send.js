const fetch = require("node-fetch");
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson } = require('../lib/functions')
const { cmd, commands } = require("../lib/command");
const yts = require("yt-search");
const config = require("../settings");
// Get prefix dynamically from settings or fallback
const prefix = config.PREFIX || ".";
const cheerio = require('cheerio'); // For HTML scraping from AN1
const { JSDOM } = require('jsdom'); // For DOM parsing from HTML
const axios = require("axios");

/*const fetch = require("node-fetch");
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson } = require('../lib/functions');
const { cmd, commands } = require("../lib/command");
const yts = require("yt-search");
const config = require("../settings");

const prefix = config.PREFIX || ".";*/


  cmd({
  pattern: "2gg",
  alias: "song",
  react: "üéµ",
  desc: "Download Song",
  category: "download",
  filename: __filename,
}, async (robin, mek, m, { from, q, prefix, reply }) => {
  try {
    if (!q) return reply("`Give Me SONG NAME OR LINK || ‡∂±‡∂∏‡∂ö‡∑ä ‡∂Ø‡∑í‡∂∫‡∂±‡∑äüòì‚ù§Ô∏è`");

    const search = await yts(q);
    if (!search.videos.length) return reply("`‚ùå Video not found!`");
    const data = search.videos[0];

    const cap = `\`‰πÇ Ôº§ùöíùöóùöûùö†ùöë –ß—Ç Ôº§ÔΩèÔΩóÔΩé‚ü©‚ü©‚ü©\`
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶‚úß‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
* \`‚ú¶ ùöÉùöíùöùùöïùöé\`     : _*${data.title}*_
* \`‚ú¶ ùô≥ùöûùöõùöäùöùùöíùöòùöó\`  : _*${data.timestamp}*_
* \`‚ú¶ ùöÑùöôùöïùöòùöäùöçùöéùöç\`  : _${data.ago}_
* \`‚ú¶ Channel\`   : *_${data.author.name}_*
* \`‚ú¶ ùöÖùöíùöéùö†ùöú\`     : _${data.views}_
* \`‚ú¶ ùöÑùöÅùôª\`       : *_${data.url}_*
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úø`;

    const listData = {
      title: "‚óé ùô≤ùô∑ùôæùôæùöÇ ùôµùôæùöÅùôºùô∞ùöÉùô¥ ‚óé",
      sections: [
        {
          title: "üéß Audio/Video Options",
          rows: [
            {
              title: "[üéµ Audio]",
              description: "MP3 Song File",
              id: `${prefix}ytaud ${data.url}`
            },
            {
              title: "[üìÑ Document]",
              description: "Song as Doc File",
              id: `${prefix}ytdoc ${data.url}`
            },
            {
              title: "[üé§ Voice Note]",
              description: "Voice Format (ptt)",
              id: `${prefix}ytvoice ${data.url}`
            },
            {
              title: "[üìΩÔ∏è Video]",
              description: "MP4 Video File",
              id: `${prefix}devilv ${data.url}`
            }
          ]
        }
      ]
    };

    await robin.sendMessage(from, {
      image: { url: data.thumbnail },
      caption: cap,
      footer: "> Powered by DINUWH MD",
      buttons: [
        {
          buttonId: "song_options_list",
          buttonText: { displayText: "üîò ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∑Ä‡∑ì‡∂∏‡∑ö ‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥" },
          type: 4,
          nativeFlowInfo: {
            name: "single_select",
            paramsJson: JSON.stringify(listData),
          },
        }
      ],
      headerType: 1,
      viewOnce: true,
    }, { quoted: mek });

  } catch (e) {
    console.error(e);
    reply(`‚ùå Error: ${e.message}`);
  }
});
