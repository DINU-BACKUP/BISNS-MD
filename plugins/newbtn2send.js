const fetch = require("node-fetch");
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson } = require('../lib/functions')
const { cmd, commands } = require("../lib/command");
const yts = require("yt-search");
const config = require("../settings");
// Get prefix dynamically from settings or fallback
const prefix = config.PREFIX || ".";
const cheerio = require('cheerio'); // For HTML scraping from AN1
const { JSDOM } = require('jsdom'); // For DOM parsing from HTML
const axios = require("axios");

/*const fetch = require("node-fetch");
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson } = require('../lib/functions');
const { cmd, commands } = require("../lib/command");
const yts = require("yt-search");
const config = require("../settings");

const prefix = config.PREFIX || ".";*/

cmd({
  pattern: "2gg",
  alias: "song",
  react: "üéµ",
  desc: "Download Song",
  category: "download",
  filename: __filename,
}, async (robin, mek, m, { from, q, prefix, reply }) => {
  try {
    if (!q) return reply("`Give Me SONG NAME OR LINK || ‡∂±‡∂∏‡∂ö‡∑ä ‡∂Ø‡∑í‡∂∫‡∂±‡∑äüòì‚ù§Ô∏è`");

    const search = await yts(q);
    if (!search.videos.length) return reply("`‚ùå Video not found!`");
    const data = search.videos[0];

    const cap = `\`‰πÇ Ôº§ùöíÔΩéÔΩïÔΩóÔΩà –ß—Ç Ôº§ÔΩèÔΩóÔΩé‚ü©‚ü©‚ü©\`
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶‚úß‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

* \`‚ú¶ ùöÉùöíùöùùöïùöé\`     :  _*${data.title}*_
\`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úø\` 

* \`‚ú¶ ùô≥ùöûùöõùöäùöùùöíùöòùöó\`  : _*${data.timestamp} (${data.seconds} sec)*_  
* \`‚ú¶ ùöÑùöôùöïùöòùöäùöçùöéùöç\`  : _${data.ago}_  
* \`‚ú¶ Channel\`   : *_${data.author.name}_*
* \`‚ú¶ ùöÖùöíùöéùö†ùöú\`     : _${data.views}_
* \`‚ú¶ ùöÑùöÅùôª\`       : *_${data.url}_*

\`‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úø\`
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úø  
‚îÇ üé∂ *∆íœÉ‚Ñì‚ÑìœÉœâ œÖ—ï –ºœÖ—ïŒπ¬¢ ¬¢–ΩŒ±Œ∑Œ∑—î‚Ñì* üßö‚Äç‚ôÇÔ∏è  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úø  
üîó https://whatsapp.com/channel/0029Vb3mqn5H5JLuJO3s3Z1J

> *Send You Want Song Formate ‚§µÔ∏è*`;

    if (config.MODE === 'nonbutton') {
      const sections = [
        {
          title: "",
          rows: [
            { title: "1", rowId: `${prefix}ytaud ${data.url}`, description: '`‚ù≤ Audio File ‚ù≥` üéß' },
            { title: "2", rowId: `${prefix}ytdoc ${data.url}`, description: '`‚ù≤ Document File ‚ù≥` üìÑ' },
            { title: "3", rowId: `${prefix}ytvoice ${data.url}`, description: '`‚ù≤ Voice Note (ptt) ‚ù≥` üé§' },
            { title: "4", rowId: `${prefix}devilv ${data.url}`, description: '`‚ù≤ Video File (mp4) ‚ù≥` üìΩÔ∏è' },
          ]
        }
      ];
      const listMessage = {
        caption: cap,
        image: { url: data.thumbnail },
        footer: '> „ÄΩÔ∏èade By Dinuwh Bbh',
        title: '',
        buttonText: '> *‚óéPower Full Whatsapp bot Make By Dinuwh‚óé*',
        sections
      };
      return await robin.replyList(from, listMessage, { quoted: mek });
    }

    if (config.MODE === 'button') {
      const listData = {
        title: "‚óé ùô≤ùô∑ùôæùôæùöÇ ùôµùôæùöÅùôºùô∞ùöÉùô¥ ‚óé",
        sections: [{
          title: "DINUWH MD OPTIONS",
          rows: [
            {
              title: "[Audio üéß]",
              description: "Download as audio\n„ÄΩÔ∏èade By Dinuwh Bbh",
              id: `${prefix}ytaud ${data.url}`
            },
            {
              title: "[Document üìÅ]",
              description: "Download as document\n„ÄΩÔ∏èade By Dinuwh Bbh",
              id: `${prefix}ytdoc ${data.url}`
            },
            {
              title: "[Voice (ptt) üí°]",
              description: "Download as Voice Note\n„ÄΩÔ∏èade By Dinuwh Bbh",
              id: `${prefix}ytvoice ${data.url}`
            },
            {
              title: "[Video File üìΩÔ∏è]",
              description: "Download as Video\n„ÄΩÔ∏èade By Dinuwh Bbh",
              id: `${prefix}devilv ${data.url}`
            }
          ]
        }]
      };

      return await robin.sendMessage(from, {
        image: { url: data.thumbnail },
        caption: cap,
        footer: "> „ÄΩÔ∏èade By Dinuwh Bbh",
        buttons: [
          {
            buttonId: "action",
            buttonText: { displayText: "üîò Choose Song Type" },
            type: 4,
            nativeFlowInfo: {
              name: "single_select",
              paramsJson: JSON.stringify(listData),
            },
          },
          const listData = {
        title: "‚óé ùô≤ùô∑ùôæùôæùöÇ ùôµùôæùöÅùôºùô∞ùöÉùô¥ ‚óé",
        sections: [{
          title: "DINUWH MD OPTIONS",
          rows: [
            {
              title: "[Audio üéß]",
              description: "Download as audio\n„ÄΩÔ∏èade By Dinuwh Bbh",
              id: `${prefix}ytaud ${data.url}`
            },
            {
              title: "[Document üìÅ]",
              description: "Download as document\n„ÄΩÔ∏èade By Dinuwh Bbh",
              id: `${prefix}ytdoc ${data.url}`
            },
            {
              title: "[Voice (ptt) üí°]",
              description: "Download as Voice Note\n„ÄΩÔ∏èade By Dinuwh Bbh",
              id: `${prefix}ytvoice ${data.url}`
            },
            {
              title: "[Video File üìΩÔ∏è]",
              description: "Download as Video\n„ÄΩÔ∏èade By Dinuwh Bbh",
              id: `${prefix}devilv ${data.url}`
            }
          ]
        }]
      };

      return await robin.sendMessage(from, {
        image: { url: data.thumbnail },
        caption: cap,
        footer: "> „ÄΩÔ∏èade By Dinuwh Bbh",
        buttons: [
          {
            buttonId: "action",
            buttonText: { displayText: "üîò Choose Song Type" },
            type: 4,
            nativeFlowInfo: {
              name: "single_select",
              paramsJson: JSON.stringify(listData),
            },
          }
        ],
        headerType: 1,
        viewOnce: true,
      }, { quoted: mek });
    }

  } catch (e) {
    console.error(e);
    reply(`‚ùå Error: ${e.message}`);
  }
});
